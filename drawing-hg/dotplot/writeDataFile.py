

def writeDataFile(Sequences,PairProb,UnPairProb,permKey,Method,UseTitle,TitleStr,DataFile):

    import time
    strftime = time.strftime
    
    # Delimiters for data plot
    Delimiters = [',',' ','\t']
    DelimitIndex = 2 # = 0 for comma, 1 for space, and 2 for tab

    # Open the data file
    f = open(DataFile,'w')

    if Method == 3: # .fpairs file
        f.write('% This is a data file for the plot containing ')
        if (UseTitle):
            f.write('%s.\n%%\n' % TitleStr)
        else:
            f.write('ensemble pair fractions.\n%\n')
        f.write('%% This file was generated by nupack.org on %s PST\n%%\n' % strftime('%c'))
        f.write('% The data are in five columns.  Each row describes a base pair between\n')
        f.write('% base i of strand A and base j of strand B.  Column 1 contains the strand\n')
        f.write('% ID for strand A; column 2 contains i; column 3 contains the strand ID for\n')
        f.write('% strand B; column 4 contains j; and column 5 contains the fraction of strands\n')
        f.write('% of sequence A that have base i paired with base j of sequence B at equilibrium.\n')
        f.write('% If an entry of -1 appears in columns 3 and 4, column 5 then signifies the\n')
        f.write('% fraction of strands of sequence A for which base i is unpaired at equilibrium.\n')
        f.write('% Only values above a cutoff of 0.001 are reported.\n')
        f.write('%\n% The sequences:\n')
        for i in range(len(Sequences)):
            f.write('%% Strand %d: %s\n' % (Sequences[i][0],Sequences[i][1]))


    elif Method == 1:
        f.write('% This is a data file for the plot containing ')
        if (UseTitle):
            f.write('%s.\n%%\n' % TitleStr)
        else:
            f.write('pair probabilities for an ordered complex.\n%\n')
        f.write('%% This file was generated by nupack.org on %s PST\n%%\n' % strftime('%c'))
        f.write('% The data are in five columns.  Each row describes a base pair between\n')
        f.write('% base i of strand A and base j of strand B.  Column 1 contains the strand\n')
        f.write('% ID for strand A; column 2 contains i; column 3 contains the strand ID for\n')
        f.write('% strand B; column 4 contains j; and column 5 contains the probability that\n')
        f.write('% base i of strand A is paired with base j of strand B at equilibrium.\n')
        f.write('% Note that strand A and strand B are considered to be distinguishable, even\n')
        f.write('% if they have the same sequence.  Also, since the plot of pair probabilities\n')
        f.write('% is symmetric, only the upper triangle is reported in this file.\n')
        f.write('% If an entry of -1 appears in columns 3 and 4, column 5 then signifies the\n')
        f.write('% probability that base i of strand A is unpaired at equilibrium.\n')
        f.write('% Only values above a cutoff of 0.001 are reported.\n')
        f.write('%\n% The sequences:\n')
        for i in range(len(Sequences)):
            f.write('%% Strand %d: %s\n' % (Sequences[i][0],Sequences[i][1]))
        f.write('%\n% The ordered complex is:\n% ')
        for i in range(len(permKey)-1):
            f.write('Strand %d - ' % permKey[i])
        f.write('Strand %d\n' % permKey[-1])

    elif Method == 4:
        f.write('% This is a data file for the plot containing ')
        if (UseTitle):
            f.write('%s.\n%%\n' % TitleStr)
        else:
            f.write('pair probabilities for a single strand.\n%\n')
        f.write('%% This file was generated by nupack.org on %s PST\n%%\n' % strftime('%c'))
        f.write('% The data are in three columns.  Each row describes a base pair between\n')
        f.write('% base i and base j.  Column 1 contains i, column 2 contains j, and column\n')
        f.write('% 3 contains the probability that base i is paired with base j at equilibrium.\n')
        f.write('% If an entry of -1 appears in column 2, column 3 signifies the probability\n')
        f.write('% that base i is unpaired at equilibrium.\n')
        f.write('% Only values above a cutoff of 0.001 are reported.\n')
        f.write('%\n% The sequence:\n')
        f.write('%% %s\n' % Sequences[0][1])



    if Method == 3 or Method == 1:
        for x in PairProb:
            # Get strand IDs
            A = permKey[x[3]]
            B = permKey[x[4]]

            # Get indices i and j
            nBasesBefore = 0
            k = 0
            while k < x[3]:
                nBasesBefore += Sequences[permKey[k]-1][2]
                k += 1
            i = x[0] - nBasesBefore + 1
            nBasesBefore = 0
            k = 0
            while k < x[4]:
                nBasesBefore += Sequences[permKey[k]-1][2]
                k += 1
            j = x[1] - nBasesBefore + 1

            f.write('%d%s%d%s%d%s%d%s%8.7f\n' %
                    (A,Delimiters[DelimitIndex],i,Delimiters[DelimitIndex],
                     B,Delimiters[DelimitIndex],j,Delimiters[DelimitIndex],x[2]))

        for x in UnPairProb:
            # Get strand IDs
            A = permKey[x[2]]
            B = -1

            # Get indices i and j
            nBasesBefore = 0
            k = 0
            while k < x[2]:
                nBasesBefore += Sequences[permKey[k]-1][2]
                k += 1
            i = x[0] - nBasesBefore + 1
            j = -1

            f.write('%d%s%d%s%d%s%d%s%8.7f\n' %
                    (A,Delimiters[DelimitIndex],i,Delimiters[DelimitIndex],
                     B,Delimiters[DelimitIndex],j,Delimiters[DelimitIndex],x[1]))

    elif Method == 4:
        for x in PairProb:
            f.write('%d%s%d%s%8.7f\n' % (x[0]+1,Delimiters[DelimitIndex],x[1]+1,
                                         Delimiters[DelimitIndex],x[2]))
        for x in UnPairProb:
            f.write('%d%s%d%s%8.7f\n' % (x[0]+1,Delimiters[DelimitIndex],-1,
                                         Delimiters[DelimitIndex],x[1]))
            

    f.close()


