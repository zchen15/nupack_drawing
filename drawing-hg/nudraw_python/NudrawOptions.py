# nudraw.py specific options
# Conrad Steenberg <conrad.steenberg@caltech.edu>
# Nov 20, 2008

import Options
# ------------------------------------------------------------------------------
# Parse command line options
def_option_vars={\
      "structure"       : "",
      "sequence"        : "",
      "material"        : "rna",
      "svgfile2d"       : "",
      "pngfile2d"       : "",
      "svgfile25d"      : "",
      "pngfile25d"      : "",
      "filecounter2d"   : Options.StringList(),
      "domainnames"     : Options.StringList(),
      "domaincolors"    : Options.StringList(),
      "dotfile"         : "",
      "mfefile"         : "",
      "probfile"        : "",
      "keyfile"         : "",
      "complex_permutation" : Options.StringList(),
      "jsonout"         : "",
      "jsonin"          : "",
      "jsonin25d"       : "",
      "tachyon3d"       : "",
      "pov3d"           : "",
      "json3d"          : "",
      "json25d"         : "",
      "numberinterval"  : "auto",
      "show3d"          : Options.IntList(),
      "show25d"         : Options.IntList(),
      "show2d"          : Options.IntList(),
      "drawbases"       : Options.IntList(),
      "drawbasenumbers" : Options.IntList(),
      "drawbaseticks"   : Options.IntList(),
      "colorbaseprob"   : Options.IntList(),
      "colorbaseid"     : Options.IntList(),
      "colorbar"        : Options.IntList(),
      "baseidbar"       : Options.IntList(),
      "colorbarspace"   : Options.IntList(),
      "colorstrands"    : Options.IntList(),
      "colordomains"    : Options.IntList(),
      "labeldomains"    : Options.IntList(),
      "domainkey"       : Options.IntList(),
      "quiet"           : Options.IntList(),
      "debug"           : Options.IntList(),
      "interactive"     : Options.IntList(),
      "hidetoptitle"    : Options.IntList(),
      "skipfirstnumber" : Options.IntList(),
      "hidebottomtitle" : Options.IntList(),
      "optionsjson"     : Options.IntList(),
      "unpairedcircle"  : Options.IntList(),
      "noscale"         : Options.IntList(),
      "domains"         : "",
      "domainids"       : "",
      "stdout"          : "",
      "stderr"          : "",
      "designjson"      : "",
      "toptitle"        : "",
      "bottomtitle"     : "",
      "width"           : "512",
      "height"          : "512",
      "backend"         : "",
      "debugprobfile"   : "",
      "targetfile"      : "",
      "simpleprobfile"  : "",
      "dpi"             : "100",
      "legend_label"    : 'Equilibrium probability',
      "bbwidth"         : "24",
}

option_vars_doc={ \
      "structure"       : "Dot-parens structure, e.g. ...(((...)))...",
      "sequence"        : "Nucleic acid sequence (ACGT or U)",
      "material"        : "Either rna or dna",
      "svgfile2d"       : "Name of the 2D svg file to be produced",
      "pngfile2d"       : "Name of the 2D PNG file to be produced",
      "svgfile25d"      : "Name of the 2D svg file to be produced",
      "pngfile25d"      : "Name of the 2D PNG file to be produced",
      "dotfile"         : "Name of the Graphviz file. In this file loops are nodes and helices are edges",
      "mfefile"         : "Input file to read structure information from",
      "probfile"        : "Input file to read probability information from",
      "keyfile"        : "Input file to read complex structure arrangements from",
      "complex_permutation"       : "Read mfe file for complex and permutation specified, e.g. 5,1",
      "filecounter2d"   : "Comma separated list of strings to substitute in export filenames",
      "jsonout"         : "Name of 2D json layout file to be created",
      "jsonin"          : "Name of 2D json layout file to be read",
      "jsonin25d"       : "Name of 2.5D json layout file to be read",
      "tachyon3d"       : "3D Scene file export for Tachyon raytracer",
      "pov3d"           : "3D Scene file export for POV raytracer",
      "json3d"          : "3D Scene file export for Json Viewer/Renderer",
      "json25d"         : "2.5D Layout export (2D + rotations)",
      "show3d"          : "Show 3D OpenGL model",
      "show25d"         : "Show 2.5D layout in 2D",
      "show2d"          : "Show 2D layout",
      "drawbases"       : "Draw base letters if available from mfe file",
      "drawbaseticks"   : "Draw outward ticks instead of circles",
      "drawbasenumbers" : "Number bases",
      "numberinterval"  : "Number interval",
      "colorbaseprob"   : "Shade bases according to probability read from probfile",
      "colorbaseid"     : "Shade bases according to base letter",
      "colorbar"        : "Draw probability colorbar",
      "domaincolors"    : "Comma separated list of hex color codes, e.g.: ff0000,00ff00,0000ff for red,blue and green",
      "baseidbar"       : "Draw base identity key",
      "colorbarspace"   : "Reserve space for colorbar, but draw only if colorbar option set",
      "colorstrands"    : "Draw strands in different colors",
      "colordomains"    : "Color backbone according to domain specification. REQUIRES 'domains' option",
      "labeldomains"    : "Label strand domains with text labels",
      "domainkey"       : "Creates legend at the bottom of the plot indicating the domain names",
      "debug"           : "Be verbose",
      "quiet"           : "Suppress all output",
      "interactive"     : "Force importing interactive graphics libraries",
      "stdout"          : "File to use as standard output",
      "stderr"          : "File to use as standard error",
      "optionsjson"     : "Read options from stdin in json format, in the form of key/value pairs",
      "domains"         : "Assign domains to bases",
      "domainnames"     : "Assign domain names to bases",
      "designjson"      : "Alternative input file for structures, sequences, and probabilities",
      "hidetoptitle"    : "Hide the top title",
      "hidebottomtitle" : "Hide the bottom title",
      "skipfirstnumber" : "Don't draw first number if numbering bases",
      "toptitle"        : "The top title",
      "bottomtitle"     : "The bottom title",
      "width"           : "2D Figure width in pixels",
      "height"          : "2D Figure height in pixels",
      "backend"         : "Rendering backend to use (agg, cairo)",
      "debugprobfile"   : "JSON file containing probabilities as read from .pprob",
      "targetfile"      : "File to be used as target by Dotplot.py -target",
      "simpleprobfile"  : "Read probabilities from a simple text file where every line\n"+\
                          "contains a probability",
      "dpi"             : "Resolution of output in Dots Per Inch",
      "legend_label"    : "Label for the legend",
      "unpairedcircle"  : "Draw unpaired structures as a circle instead of a line"
}
